# The following code was generated by ChatGPT

class Board:
    """Class representing the game board"""

    def __init__(self, size):
        self.size = size
        self.board = [[" " for _ in range(size)] for _ in range(size)]

    def display(self):
        """Display the game board"""
        for row in self.board:
            print("|".join(row))

    def is_valid_move(self, row, col):
        """Check if the given move is valid"""
        return self.board[row][col] == " "

    def make_move(self, row, col, player):
        """Make a move on the game board"""
        self.board[row][col] = player

    def is_winner(self, player):
        """Check if the given player has won the game"""
        # Check rows
        for row in self.board:
            if all([cell == player for cell in row]):
                return True

        # Check columns
        for col in range(self.size):
            if all([self.board[row][col] == player for row in range(self.size)]):
                return True

        # Check diagonals
        if all([self.board[i][i] == player for i in range(self.size)]):
            return True
        if all([self.board[i][self.size - i - 1] == player for i in range(self.size)]):
            return True

        return False


class Player:
    """Class representing a player"""

    def __init__(self, name, symbol):
        self.name = name
        self.symbol = symbol


class Game:
    """Class representing the game"""

    def __init__(self, board_size, player1_name, player2_name):
        self.board = Board(board_size)
        self.players = [Player(player1_name, "X"), Player(player2_name, "O")]
        self.current_player = self.players[0]

    def play(self):
        """Play the game"""
        while not self.is_game_over():
            self.board.display()
            self.get_move()
            self.switch_player()

        self.board.display()
        winner = self.get_winner()
        if winner:
            print(f"{winner.name} wins!")
        else:
            print("It's a tie!")

    def get_move(self):
        """Get a move from the current player"""
        valid_move = False
        while not valid_move:
            row = int(input(f"{self.current_player.name}, enter a row number: "))
            col = int(input(f"{self.current_player.name}, enter a column number: "))
            if self.board.is_valid_move(row, col):
                self.board.make_move(row, col, self.current_player.symbol)
                valid_move = True
            else:
                print("That move is not valid. Please try again.")

    def switch_player(self):
        """Switch to the other player"""
        if self.current_player == self.players[0]:
            self.current_player = self.players[1]
        else:
            self.current_player = self.players[0]

    def is_game_over(self):
        """Check if the game is over"""
        if self.get_winner() or self.is_board_full():
            return True
        else:
            return False

    def is_board_full(self):
        """Check if the game board is full"""
        for row in self.board.board:
            if " " in row:
                return False
        return True

    def get_winner(self):
        """Get the winner of the game"""
        for player in self.players:
            if self.board.is_winner(player.symbol):
                return player
        return None

if __name__ == "__main__":
    board_size = 3
    player1_name = input("Enter player 1 name: ")
    player2_name = input("Enter player 2 name: ")
    game = Game(board_size, player1_name, player2_name)
    game.play()
